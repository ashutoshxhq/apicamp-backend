syntax = "proto3";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

package users;
option go_package = ".;users";

message Users {
	
	string name = 1;
	string email = 2;
	string id = 3;
}

message GetSingleUsersRequest{
	map<string, google.protobuf.Value> filters = 1;
}
  
message GetSingleUsersResponse {
	Users data = 1;
}

message GetMultipleUsersRequest {
	map<string, google.protobuf.Value> filters = 1;
}
  
message GetMultipleUsersResponse {
	repeated Users data = 1;
}

message CreateSingleUsersRequest {
	Users data = 1;
}

message CreateSingleUsersResponse {
	string message = 2;
}

message CreateMultipleUsersRequest {
	repeated Users data = 1;
}

message CreateMultipleUsersResponse {
	string message = 2;
}

message UpdateUsersRequest {
	map<string, google.protobuf.Value> filters = 1;
	map<string, google.protobuf.Value> data = 2;
}

message UpdateUsersResponse {
	string message = 2;
}

message DeleteUsersRequest{
	map<string, google.protobuf.Value> filters = 1;
}

message DeleteUsersResponse{
	string message = 2;
}

service usersService {
	rpc GetSingleUsers(GetSingleUsersRequest) returns (GetSingleUsersResponse) {
		option (google.api.http) = {
			post: "/v1/users/getSingle"
			body: "*"
		};
	}
	rpc GetMultipleUsers(GetMultipleUsersRequest) returns (GetMultipleUsersResponse) {
		option (google.api.http) = {
			post: "/v1/users"
			body: "*"
		};
	}
	rpc CreateSingleUsers(CreateSingleUsersRequest) returns (CreateSingleUsersResponse) {
		option (google.api.http) = {
			post: "/v1/users/create"
			body: "*"
		};
	}
	rpc CreateMultipleUsers(CreateMultipleUsersRequest) returns (CreateMultipleUsersResponse) {
		option (google.api.http) = {
			post: "/v1/users/createMultiple"
			body: "*"
		};
	}
	rpc UpdateUsers(UpdateUsersRequest) returns (UpdateUsersResponse) {
		option (google.api.http) = {
			post: "/v1/users/update"
			body: "*"
		};
	}
	rpc DeleteUsers(DeleteUsersRequest) returns (DeleteUsersResponse) {
		option (google.api.http) = {
			post: "/v1/users/delete"
			body: "*"
		};
	}
	
}
