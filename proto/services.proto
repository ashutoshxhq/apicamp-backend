syntax = "proto3";
package services;
import "google/api/annotations.proto";
option go_package = ".;services";

message Error {
	string error = 1;
	string message = 2;
}

message Functions {
	string id = 1;
    string name = 2;
    string request = 3;
    string response = 4;
    string user = 5;
}

message Fields {
	string id = 1;
    string name = 2;
    string type = 3;
    string key = 4;
    string user = 5;
}

message Model {
	string id = 1;
    string name = 2;
    repeated string fields = 3;
    string user = 5;
}

message Service {
	string id = 1;
    string name = 2;
    repeated string models = 3;
    repeated string functions = 4;
    string user = 5;
}

message GetServiceRequest{
	Service filter = 1;
}
  
message GetServiceResponse {
	Service data = 1;
	bool success = 2;
	Error error = 3;
}

message GetServicesRequest {
	repeated string ids = 1;
	Service filter = 2;
}
  
message GetServicesResponse {
	repeated Service data = 1;
	bool success = 2;
	Error error = 3;
}

message CreateServiceRequest {
	Service data = 1;
}

message CreateServiceResponse {
	string id = 1;
	bool success = 2;
	Error error = 3;
}

message CreateServicesRequest {
	repeated Service data = 1;
}

message CreateServicesResponse {
	repeated string ids = 1;
	bool success = 2;
	Error error = 3;
}

message UpdateServiceRequest {
	Service filter = 1;
	Service data = 2;
}

message UpdateServiceResponse {
	bool success = 1;
	Error error = 2;
}

message UpdateServicesRequest {
	repeated string ids = 1;
	Service filter = 2;
	Service data = 3;
}

message UpdateServicesResponse {
	bool success = 1;
	Error error = 2;
}

message DeleteServiceRequest{
	string id = 1;
	Service filter = 2;
}

message DeleteServiceResponse{
	bool success = 1;
	Error error = 2;
}

message DeleteServicesRequest{
	repeated string ids = 1;
	Service filter = 2;
}

message DeleteServicesResponse{
	bool success = 1;
	Error error = 2;
}


service serviceService {

	rpc GetService(GetServiceRequest) returns (GetServiceResponse) {
		option (google.api.http) = {
			post: "/services/getService"
			body: "*"
		};
	}
	rpc GetServices(GetServicesRequest) returns (GetServicesResponse) {
		option (google.api.http) = {
			post: "/services/getServices"
			body: "*"
		};
	}
	rpc CreateService(CreateServiceRequest) returns (CreateServiceResponse) {
		option (google.api.http) = {
			post: "/services/createService"
			body: "*"
		};
	}
	rpc CreateServices(CreateServicesRequest) returns (CreateServicesResponse) {
		option (google.api.http) = {
			post: "/services/createServices"
			body: "*"
		};
	}
	rpc UpdateService(UpdateServiceRequest) returns (UpdateServiceResponse) {
		option (google.api.http) = {
			post: "/services/updateServices"
			body: "*"
		};
	}
	rpc UpdateServices(UpdateServicesRequest) returns (UpdateServicesResponse) {
		option (google.api.http) = {
			post: "/services/updateServices"
			body: "*"
		};
	}
	rpc DeleteService(DeleteServiceRequest) returns (DeleteServiceResponse) {
		option (google.api.http) = {
			post: "/services/deleteService"
			body: "*"
		};
	}
	rpc DeleteServices(DeleteServicesRequest) returns (DeleteServicesResponse) {
		option (google.api.http) = {
			post: "/services/deleteServices"
			body: "*"
		};
	}

}
